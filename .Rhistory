fifth = quantile(log_change, 0.05),
lower = quantile(log_change, 0.25),
middle = quantile(log_change, 0.50),
upper = quantile(log_change, 0.75),
ninfith = quantile(log_change, 0.95),
.groups = 'drop'
)
View(custom_box_data)
ggplot(custom_box_data, aes(x = scenario, fill = scenario)) +
geom_boxplot(aes(
ymin = fifth,
lower = lower,
middle = middle,
upper = upper,
ymax = ninfith),
stat = "identity",
width = 0.5)+
scale_fill_manual(values = c("#D3D3D3", "#666666"))+
facet_wrap(~Location, drop = TRUE)+
labs(
x = "",
y = expression("Log"["10"]*" Change of "*italic("L. monocytogenes")*
"During First Day of Services (Log"["10"]*" CFU/ml)"),
fill = "Scenario")+
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, color = "black", size =14),
axis.text.y = element_text(color = "black", size = 14),
axis.title.y = element_text(size = 12),
strip.background = element_rect(color = "black", fill = "white", size = 1),
strip.text = element_text(color = "black", size = 16),
axis.line = element_line(color = "black", size = 0.5),
legend.position = "none"
)
ggsave("boxplot_d1.jpg",
plot = last_plot(),
dpi = 600,
width = 10,
height = 8,
units = "in",
device = "jpg")
# change during first service - baseline and no ST
delta_d1 = function(df, bell_schedule){
output = df %>%
mutate(
log_change = LMOCon - InLMOCon,
) %>%
dplyr::select(Location, log_change, TotTime) %>%
filter(TotTime >= 0 & TotTime <= bell_schedule)%>%
group_by(Location) %>%
dplyr::summarize(
median_change = median(log_change),
mean_change = mean(log_change),
sd_change = sd(log_change),
median_time = median(TotTime),
mean_time = mean(TotTime),
sd_time = sd(TotTime)
)
return(output)
}
d1_rtb = delta_d1(AnalysysDF_RTB, 125)
d1_stoff = delta_d1(AnalysysDF_SToff, 125)
d1_change = rbind(d1_rtb, d1_stoff)
writexl::write_xlsx(d1_change, path = "Output Data/growth_during_d1_check.xlsx")
output_rtb = AnalysysDF_RTB %>%
mutate(
log_change = LMOCon - InLMOCon,
) %>%
select(Location, log_change, TotTime) %>%
filter(TotTime >= 0 & TotTime <= 125)%>%
group_by(Location)
output_rtb
output_rtb$scenario = "Baseline"
output_stoff = AnalysysDF_SToff %>%
mutate(
log_change = LMOCon - InLMOCon,
) %>%
select(Location, log_change, TotTime) %>%
filter(TotTime >= 0 & TotTime <= 125)%>%
group_by(Location)
output_stoff
output_stoff$scenario = "Share Table Off"
bound_delta_d1 = rbind(output_rtb, output_stoff)
bound_delta_d1$scenario <- as.factor(bound_delta_d1$scenario)
library(ggplot2)
custom_box_data <- bound_delta_d1 %>%
group_by(scenario, Location) %>%
summarise(
fifth = quantile(log_change, 0.05),
lower = quantile(log_change, 0.25),
middle = quantile(log_change, 0.50),
upper = quantile(log_change, 0.75),
ninfith = quantile(log_change, 0.95),
.groups = 'drop'
)
ggplot(custom_box_data, aes(x = scenario, fill = scenario)) +
geom_boxplot(aes(
ymin = fifth,
lower = lower,
middle = middle,
upper = upper,
ymax = ninfith),
stat = "identity",
width = 0.5)+
scale_fill_manual(values = c("#D3D3D3", "#666666"))+
facet_wrap(~Location, drop = TRUE)+
labs(
x = "",
y = expression("Log"["10"]*" Change of "*italic("L. monocytogenes")*
"During First Day of Services (Log"["10"]*" CFU/ml)"),
fill = "Scenario")+
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, color = "black", size =14),
axis.text.y = element_text(color = "black", size = 14),
axis.title.y = element_text(size = 12),
strip.background = element_rect(color = "black", fill = "white", size = 1),
strip.text = element_text(color = "black", size = 16),
axis.line = element_line(color = "black", size = 0.5),
legend.position = "none"
)
ggsave("boxplot_d1.jpg",
plot = last_plot(),
dpi = 600,
width = 10,
height = 8,
units = "in",
device = "jpg")
if (Milk_Spoilage_YN==TRUE){
#Adding final service end of day time
#print(paste0(j, "service-full"))
#Adding time or Milk spoilage to items that are leftover in service line.
if(No_Left_Selection_Pre>0){
#Left_Selection_Pre<-Func_Growth_Milk_Spoilage(Temp_SL, Left_Selection_Pre, Time_Service,Growth_variability)
#Left_Selection_Pre<-Func_Spoilage_YN(Left_Selection_Pre)
Left_Selection_Pre= Func_Adding_Time_alldf(DF = Left_Selection_Pre, Time = Time_Service_Length)
}
#Here commented out the Share table items because it is added through the process.
if(No_Left_ST_Pre>0){
if(Share_Table_YN==1){
#Left_ST_Pre<-Func_Growth_Milk_Spoilage(Temp_RT, Left_ST_Pre, Time_Service) #comment out if accounted in service
#Left_ST_Pre<-Func_Spoilage_YN(Left_ST_Pre)
#Adding time to items that were left in ST
Left_ST_Pre= Func_Adding_Time_alldf(DF = Left_ST_Pre,
Time = Time_Service_Length)
}
}
#Overnight Pre Selection
#Left_Selection_Pre$TotTime<-Func_Adding_Time(Left_Selection_Pre$TotTime, Time_ON)
Left_Selection_Pre= Func_Adding_Time_alldf(DF = Left_Selection_Pre,
Time = Time_Overnight_Length)  #overnight + last 5 minutes of service
#Overnight Pre share table Table
#Left_ST_Pre$TotTime<-Func_Adding_Time(Left_ST_Pre$TotTime, Time_ON)
Left_ST_Pre= Func_Adding_Time_alldf(DF = Left_ST_Pre,
Time = Time_Overnight_Length) #overnight + last 5 minutes of service
}
#Selection Items #chose which type of storage.
if(E_coli==1 && Growth_Pre ==1){
#Selection Table Items
if(No_Left_Selection_Pre>0){
Left_Selection_Pre<-do.call(Func_Growth_Enteric,c(list(Condition="room temp",DF=Left_Selection_Pre,TimeVar=Time_ON),Inputs_Growth_Sto_Ecoli)) #Using function on left over items
}
#Share Table Items
if(No_Left_ST_Pre>0){
Left_ST_Pre<-do.call(Func_Growth_Enteric,c(list(Condition="room temp",DF=Left_ST_Pre,TimeVar=Time_ON),Inputs_Growth_Sto_Ecoli)) #using function on left over St items
}
}
if(salmonella==1 && Growth_Pre ==1){
#Selection Table Items
if(No_Left_Selection_Pre>0){
Left_Selection_Pre<-do.call(Func_Growth_Enteric,c(list(Condition="room temp",DF=Left_Selection_Pre,TimeVar=Time_ON),Inputs_Growth_Sto_Salmonella)) #Using function on left over items
}
#Share Table Items
if(No_Left_ST_Pre>0){
Left_ST_Pre<-do.call(Func_Growth_Enteric,c(list(Condition="room temp",DF=Left_ST_Pre,TimeVar=Time_ON),Inputs_Growth_Sto_Salmonella)) #using function on left over St items
}
}
if(norovirus==1 && Growth_Pre ==1){
#selection table items
if(No_Left_Selection_Pre>0){
Left_Selection_Pre<-Func_Growth_Sto_Norovirus_Plastic("room temp", Left_Selection_Pre, Time_ON) #using function on left over items
}
#Share table items
if(No_Left_ST_Pre>0){
Left_ST_Pre<- Func_Growth_Sto_Norovirus_Plastic("room temp", Left_ST_Pre, Time_ON) #Share table left over items
}
}
# GROWTH SPOILAGE MILK  #Commented out because we are doing differently now. Doing based on time.
if (Milk_Spoilage_YN==TRUE){
# #GROWTH overnights Selection
# if(No_Left_Selection_Pre>0){
#   Left_Selection_Pre<-Func_Growth_Milk_Spoilage(Temp_Ref, Left_Selection_Pre, Time_ON,Growth_variability)
#   Left_Selection_Pre<-Func_Spoilage_YN(Left_Selection_Pre)
# }
#GROWTH overnights Share Table
if(No_Left_ST_Pre>0){
if( Share_Table_YN==1){
# Left_ST_Pre<-Func_Growth_Milk_Spoilage(Temp_Ref, Left_ST_Pre, Time_ON,Growth_variability)
# Left_ST_Pre<-Func_Spoilage_YN(Left_ST_Pre)
}
}
}
# SHARED ASIDE JOINING
if (STtoReservice_YN == 0 && ST_Aside==1 ){
if(No_Left_ST_Pre>0){
Left_ST_Pre$Location<-"Shared"
}
}
#RETURNING ITEMS BECAUSE OF RESERVICE:
if (STtoReservice_YN == 1 ){
Left_ST_Pre$Reserviced<-(Left_ST_Pre$Reserviced+1)
Left_Selection_Pre<-rbind(Left_Selection_Pre,Left_ST_Pre)
No_Left_Selection_Pre<-nrow(Left_Selection_Pre)
if(No_Left_Selection_Pre>0){
Left_Selection_Pre$Location<-"Selection Table"
}
No_Left_Selection_Pre<-nrow(Left_Selection_Pre)
Left_ST_Pre<-Left_ST_Pre[0,]
}
#ITEMS LEFT EVERY DAY
Items_left_everyday_Pre[[paste(l,k)]]<-Left_Selection_Pre
if (Sim_PRE==1){
#Pre that stayed in share table.
Left_ST_Pre<-Pre_Data.Frame[which(Pre_Data.Frame$Location == "Shared"),]
#Pre that stayed in Selection table
Left_Selection_Pre<-Pre_Data.Frame[which(Pre_Data.Frame$Location == "Selection Table"),]
No_Left_ST_Pre<-nrow(Left_ST_Pre)
No_Left_Selection_Pre<-nrow(Left_Selection_Pre)
# OVERNIGHT TIME TO ITEMS
if (Milk_Spoilage_YN==TRUE){
#Adding final service end of day time
#print(paste0(j, "service-full"))
#Adding time or Milk spoilage to items that are leftover in service line.
if(No_Left_Selection_Pre>0){
#Left_Selection_Pre<-Func_Growth_Milk_Spoilage(Temp_SL, Left_Selection_Pre, Time_Service,Growth_variability)
#Left_Selection_Pre<-Func_Spoilage_YN(Left_Selection_Pre)
Left_Selection_Pre= Func_Adding_Time_alldf(DF = Left_Selection_Pre, Time = Time_Service_Length)
}
#Here commented out the Share table items because it is added through the process.
if(No_Left_ST_Pre>0){
if(Share_Table_YN==1){
#Left_ST_Pre<-Func_Growth_Milk_Spoilage(Temp_RT, Left_ST_Pre, Time_Service) #comment out if accounted in service
#Left_ST_Pre<-Func_Spoilage_YN(Left_ST_Pre)
#Adding time to items that were left in ST
Left_ST_Pre= Func_Adding_Time_alldf(DF = Left_ST_Pre,
Time = Time_Service_Length)
}
}
#Overnight Pre Selection
#Left_Selection_Pre$TotTime<-Func_Adding_Time(Left_Selection_Pre$TotTime, Time_ON)
Left_Selection_Pre= Func_Adding_Time_alldf(DF = Left_Selection_Pre,
Time = Time_Overnight_Length)  #overnight + last 5 minutes of service
#Overnight Pre share table Table
#Left_ST_Pre$TotTime<-Func_Adding_Time(Left_ST_Pre$TotTime, Time_ON)
Left_ST_Pre= Func_Adding_Time_alldf(DF = Left_ST_Pre,
Time = Time_Overnight_Length) #overnight + last 5 minutes of service
}
#GROWTH OVERNIGHT STORAGE
#Selection Items #chose which type of storage.
if(E_coli==1 && Growth_Pre ==1){
#Selection Table Items
if(No_Left_Selection_Pre>0){
Left_Selection_Pre<-do.call(Func_Growth_Enteric,c(list(Condition="room temp",DF=Left_Selection_Pre,TimeVar=Time_ON),Inputs_Growth_Sto_Ecoli)) #Using function on left over items
}
#Share Table Items
if(No_Left_ST_Pre>0){
Left_ST_Pre<-do.call(Func_Growth_Enteric,c(list(Condition="room temp",DF=Left_ST_Pre,TimeVar=Time_ON),Inputs_Growth_Sto_Ecoli)) #using function on left over St items
}
}
if(salmonella==1 && Growth_Pre ==1){
#Selection Table Items
if(No_Left_Selection_Pre>0){
Left_Selection_Pre<-do.call(Func_Growth_Enteric,c(list(Condition="room temp",DF=Left_Selection_Pre,TimeVar=Time_ON),Inputs_Growth_Sto_Salmonella)) #Using function on left over items
}
#Share Table Items
if(No_Left_ST_Pre>0){
Left_ST_Pre<-do.call(Func_Growth_Enteric,c(list(Condition="room temp",DF=Left_ST_Pre,TimeVar=Time_ON),Inputs_Growth_Sto_Salmonella)) #using function on left over St items
}
}
if(norovirus==1 && Growth_Pre ==1){
#selection table items
if(No_Left_Selection_Pre>0){
Left_Selection_Pre<-Func_Growth_Sto_Norovirus_Plastic("room temp", Left_Selection_Pre, Time_ON) #using function on left over items
}
#Share table items
if(No_Left_ST_Pre>0){
Left_ST_Pre<- Func_Growth_Sto_Norovirus_Plastic("room temp", Left_ST_Pre, Time_ON) #Share table left over items
}
}
# GROWTH SPOILAGE MILK  #Commented out because we are doing differently now. Doing based on time.
if (Milk_Spoilage_YN==TRUE){
# #GROWTH overnights Selection
# if(No_Left_Selection_Pre>0){
#   Left_Selection_Pre<-Func_Growth_Milk_Spoilage(Temp_Ref, Left_Selection_Pre, Time_ON,Growth_variability)
#   Left_Selection_Pre<-Func_Spoilage_YN(Left_Selection_Pre)
# }
#GROWTH overnights Share Table
if(No_Left_ST_Pre>0){
if( Share_Table_YN==1){
# Left_ST_Pre<-Func_Growth_Milk_Spoilage(Temp_Ref, Left_ST_Pre, Time_ON,Growth_variability)
# Left_ST_Pre<-Func_Spoilage_YN(Left_ST_Pre)
}
}
}
# SHARED ASIDE JOINING
if (STtoReservice_YN == 0 && ST_Aside==1 ){
if(No_Left_ST_Pre>0){
Left_ST_Pre$Location<-"Shared"
}
}
#RETURNING ITEMS BECAUSE OF RESERVICE:
if (STtoReservice_YN == 1 ){
Left_ST_Pre$Reserviced<-(Left_ST_Pre$Reserviced+1)
Left_Selection_Pre<-rbind(Left_Selection_Pre,Left_ST_Pre)
No_Left_Selection_Pre<-nrow(Left_Selection_Pre)
if(No_Left_Selection_Pre>0){
Left_Selection_Pre$Location<-"Selection Table"
}
No_Left_Selection_Pre<-nrow(Left_Selection_Pre)
Left_ST_Pre<-Left_ST_Pre[0,]
}
#ITEMS LEFT EVERY DAY
Items_left_everyday_Pre[[paste(l,k)]]<-Left_Selection_Pre
}
#Setting Working Directory-------------------------------------
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set working directory to the path of document
#Opening Libary and Inputs-------------------------------------
source("Util_Library.R")
source("Functions_Full_Analysis.R")
library(tidyverse)
#Inputs and Source Files-------------------------------------
#Inputs
source("Main_Loop.R")
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_Output_Functions.R")
#Function for growth and lag phase
#Note for Lmo changed the minimum growth temp (T0) to uniform distribution taken from Ramos et al 2023, Koutsoumanis et al. 2010 use Normal (−2.47, 1.26) for T0, which is another option
#Old temp is the 5C reference temp # distribution from Ramos T0 = runif(1,-2,-1), we use -2 here as worst case
new_growth_rate<-function(newTemp, oldMu,oldTemp = 5, T0 = -2){
newMu<-(((newTemp-T0)/(oldTemp-T0))^2)* oldMu #in alignment with WHO FAO 2004 & Ramos et al 2023 equation, note change to square the value of the first term of the equation
return (newMu)
}
#Calculation of the new lag time.
new_lag_time <- function (newTemp, oldLag, oldTemp = 5, T0 = -2) {
numerator <- oldTemp -T0
denom <- newTemp - T0
newLag <- ( (numerator / denom)^2) * oldLag
return(newLag)
}
#This function calculates thee growth based on a time and temperature profile for 1 specific milk with Listeria monocytogenes
Func_Growth_LagCon<-function(In_Lag_Consumed, Time_Temp_df,Interval, AF){
#In_Lag_Consumed= Total lag time consumed
#Time_Temp_df = dataframe with time and temperature conditions
#Interval = time interval in the time_temp_df in hrs.
Total_Lag_Consumed = In_Lag_Consumed
Total_Growth = 0
old_lag = 0 #for now assuming no lag
NMax = 8.5 #came from Koutsoumanis et al. 2010
old_mumax = 0.0181 #runif(1, 0.00383, 0.0181) #converted WHO FAO 2004 value for Lm growth at 5C in milk
Growth_V = c()
for (i in 1:nrow(Time_Temp_df)){
if (Total_Lag_Consumed <1 && old_lag!=0){
Lag_t_interval<-new_lag_time(newTemp = Time_Temp_df$MilkTemp[i], oldLag = old_lag)
Lag_Consumed<-Interval/Lag_t_interval
Total_Lag_Consumed<-Total_Lag_Consumed+Lag_Consumed
Growth = 0
} else if (Total_Lag_Consumed>=1 | old_lag == 0){
Growth = ((new_growth_rate(newTemp = Time_Temp_df$MilkTemp[i], oldMu = old_mumax))*AF)
Total_Growth = Total_Growth + (Growth*Interval)
}
Growth_V = c(Growth_V,Total_Growth)
#print(length(Growth_V))
}
return(list(Total_Growth,Total_Lag_Consumed,Growth_V))
}
#Buchanan three phrase function
LMO_Function_Single_Milk<-function(Cont, Pop_Max, Time_Temp_df, Interval =1/60, AF){
Lag_Consumed = 0
#this function provides two outputs, the total growth, and the new updated lag phase consumed.
Output_Milk<-Func_Growth_LagCon(In_Lag_Consumed = Lag_Consumed ,Time_Temp_df = Time_Temp_df,Interval = Interval, AF=AF)
Lag_Consumed = Output_Milk[[2]]
Cont<-Output_Milk[[1]]+Cont
if( Cont>Pop_Max){
Cont = Pop_Max
}
return (list(Cont,Output_Milk[[3]]))
}
#Applying Changes over time with N max limit
Appling_Changes<-function(df,Changes_Over_Time){
NMax = 8.5 #updated
Contamination_v<-df$InLMOCon
Time_V<-df$TotTime
Final_contamination_v<-c()
for (i in 1:nrow(df)){
In_Cont<-Contamination_v[i]
Time<-Time_V[i]
if (Time == 0){
Total_Growth = 0
}else{
Total_Growth<-Changes_Over_Time[Time]
}
Final_Con<-In_Cont+Total_Growth
if(Final_Con>NMax){
Final_Con <- NMax
}
Final_contamination_v<-c(Final_contamination_v,Final_Con)
}
df$LMOCon<-Final_contamination_v
return(df)
}
#Before Running this make sure that the files from "Time and Temperature Profiles.rmd" have been generated accordingly
## Primary Scenarios
#Room Temp B
Df_RT_MT_RTB<-read.csv("Pedicted Time and Temp Profiles/Df_RT_MT_RTB.csv")
#Refrigerated Tray
Df_RT_MT_RT<-read.csv("Pedicted Time and Temp Profiles/Df_RT_MT_RT.csv")
#Tray With Ice Packs
Df_RT_MT_TIP<-read.csv("Pedicted Time and Temp Profiles/Df_RT_MT_TIP.csv")
#Tray with Ice
Df_RT_MT_TIC<-read.csv("Pedicted Time and Temp Profiles/Df_RT_MT_TIC.csv")
#Cooler with Ice
Df_RT_MT_CI<-read.csv("Pedicted Time and Temp Profiles/Df_RT_MT_CI.csv")
#room temp b with ref break
Df_RT_MT_RTB_refB<-read.csv("Pedicted Time and Temp Profiles/Df_RT_MT_RTB_refB.csv")
## Temperature Scenarios
#Room Temp B
Df_RT_MT_RTB_18C<-read.csv("Pedicted Time and Temp Profiles/Df_RT_MT_RTB_18C.csv")
#Refrigerated Tray
Df_RT_MT_RTB_21C<-read.csv("Pedicted Time and Temp Profiles/Df_RT_MT_RTB_21C.csv")
#Tray With Ice Packs
Df_RT_MT_RTB_23C<-read.csv("Pedicted Time and Temp Profiles/Df_RT_MT_RTB_23C.csv")
## Updated Refrigeration Temps
#At 7 C
Df_RT_MT_Ref_7C<-read.csv("Pedicted Time and Temp Profiles/Df_RT_MT_Ref_7C.csv")
#At 2 C
Df_RT_MT_Ref_2C<-read.csv("Pedicted Time and Temp Profiles/Df_RT_MT_Ref_2C.csv")
#At 4 C
Df_RT_MT_Ref_4C<-read.csv("Pedicted Time and Temp Profiles/Df_RT_MT_Ref_4C.csv")
#Bell Schedule Scenarios
#Very long
Df_RT_MT_s5b4<-read.csv("Pedicted Time and Temp Profiles/Df_RT_MT_s5b4.csv")
#Long
Df_RT_MT_s4b3<-read.csv("Pedicted Time and Temp Profiles/Df_RT_MT_s4b3.csv")
#Very short
Df_RT_MT_s1b0<-read.csv("Pedicted Time and Temp Profiles/Df_RT_MT_s1b0.csv")
#Short
Df_RT_MT_s2b1<-read.csv("Pedicted Time and Temp Profiles/Df_RT_MT_s2b1.csv")
#Medium
Df_RT_MT_s3b2<-read.csv("Pedicted Time and Temp Profiles/Df_RT_MT_s3b2.csv")
#Long + Tray with Ice
Df_RT_MT_s4b3TIC<-read.csv("Pedicted Time and Temp Profiles/Df_RT_MT_s4b3TIC.csv")
#Long + Tray with Ice Packs
Df_RT_MT_s4b3TIP<-read.csv("Pedicted Time and Temp Profiles/Df_RT_MT_s4b3TIP.csv")
#Very long + Tray with Ice
Df_RT_MT_s5b4TIC<-read.csv("Pedicted Time and Temp Profiles/Df_RT_MT_s5b4TIC.csv")
#very long + Tray with Ice Packs
Df_RT_MT_s5b4TIP<-read.csv("Pedicted Time and Temp Profiles/Df_RT_MT_s5b4TIP.csv")
#This chunk Runs the ST Model
Obtaining_LMO_Milks_DFs<-function(N_Years, Service_Length,TurningT_Length){
final_list <- list()
#Define the length of periods to match your model to properly adjust time.
Service_Length = Service_Length#50
TurningT_Length = TurningT_Length#25
for (i in 1:N_Years){
print(i)
start_time<-Sys.time()
source("Main_Loops2.R")
#1. Start from here
Individual_Analysis_Milk<-rbind.fill(List_Sens_Pre)
#2. find the duplicates
#this step filters replicated based on the ID
Individual_Analysis_Milk<-Individual_Analysis_Milk %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))
#3. Add time to the system
AnalysysDF<-Individual_Analysis_Milk
#Adding the time of the services for those milks that were added to the service line during the lunch period.
AnalysysDF[AnalysysDF$Initial.Service>1,]
AnalysysDF$TotTime<-AnalysysDF$TotTime+(as.integer(AnalysysDF$Initial.Service)-1)*(Service_Length+TurningT_Length)
AnalysysDF$Shared<-ifelse(AnalysysDF$STtimes>0, "Yes", "No")
final_list<-append(final_list,list(AnalysysDF))
end_time<-Sys.time()
Total_time<-end_time-start_time
print(Total_time)
}
return(final_list)
}
#normal service, changes in time and temp profile #this runs the model
source("Input_Static.R")
Outs_DFs<-Obtaining_LMO_Milks_DFs(N_Years = 1, Service_Length = 50,TurningT_Length = 25)
Outs_DFs_RTB<-Outs_DFs
RTB_List<-list()
Output_Milk_RTB<-LMO_Function_Single_Milk(Cont = 0, Pop_Max =8.5, Time_Temp_df = Df_RT_MT_RTB, Interval =1/60,AF = 1)
Changes_Over_Time_RTB<-Output_Milk_RTB[[2]]
for (i in 1:1){
AnalysysDF_RTB<- Appling_Changes(df = Outs_DFs_RTB[[i]], Changes_Over_Time = Changes_Over_Time_RTB)
RTB_List<-append(RTB_List,list(AnalysysDF_RTB))
}
RTB_List[[i]]
RTB_Combined <- bind_rows(RTB_List)
View(RTB_Combined)
